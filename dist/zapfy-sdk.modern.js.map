{"version":3,"file":"zapfy-sdk.modern.js","sources":["../src/http/zapfy.http.ts","../src/sdk.ts","../src/types/index.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const client = axios.create({\r\n    baseURL: 'https://api.zapfy.me/v1',\r\n});","import { AxiosResponse } from \"axios\";\r\nimport { client } from \"./http/zapfy.http\"\r\nimport { \r\n    ZapfyTypes,\r\n} from \"./types\";\r\n\r\nexport namespace ZapfySdk {\r\n    export namespace Instance {\r\n        export const connect = async (\r\n            params: ZapfyTypes.DefaultParams\r\n        ): Promise<ZapfyTypes.ConnectInstanceResult> => {\r\n            try {\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.ConnectInstanceResult,\r\n                    AxiosResponse<ZapfyTypes.ConnectInstanceResult> \r\n                >(`/instance/${params.instanceKey}/token/${params.instanceToken}/connect`);\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const disconnect = async (\r\n            params: ZapfyTypes.DefaultParams\r\n        ): Promise<ZapfyTypes.ConnectInstanceResult> => {\r\n            try {\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.ConnectInstanceResult,\r\n                    AxiosResponse<ZapfyTypes.ConnectInstanceResult> \r\n                >(`/instance/${params.instanceKey}/token/${params.instanceToken}/disconnect`);\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getState = async (\r\n            params: ZapfyTypes.DefaultParams\r\n        ): Promise<ZapfyTypes.GetInstanceStateResult> => {\r\n            try {\r\n                \r\n                const response = await client.get<\r\n                    ZapfyTypes.GetInstanceStateResult,\r\n                    AxiosResponse<ZapfyTypes.GetInstanceStateResult>\r\n                >(`/instance/${params.instanceKey}/token/${params.instanceToken}/getState`);\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const updateWebhook = async (\r\n            params: ZapfyTypes.UpdateWebhookParams\r\n        ): Promise<ZapfyTypes.UpdateWebhookResult> => {\r\n            try {\r\n                const { \r\n                    instanceKey, \r\n                    instanceToken, \r\n                    webhookUrl\r\n                } = params;\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateWebhookResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateWebhookResult>\r\n                >(`/instance/${instanceKey}/token/${instanceToken}/updateWebhook`, { webhookUrl });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    export namespace Profile {\r\n        export const verifyIfNumberIsInWhatsApp = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.VerifyIfNumberIsInWhatsAppResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.VerifyIfNumberIsInWhatsAppResult,\r\n                    AxiosResponse<ZapfyTypes.VerifyIfNumberIsInWhatsAppResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/onWhatsApp`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getProfileStatus = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.GetProfileStatusResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.GetProfileStatusResult,\r\n                    AxiosResponse<ZapfyTypes.GetProfileStatusResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/getProfileStatus`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const updateProfileStatus = async (\r\n            params: ZapfyTypes.UpdateProfileStatusParams,\r\n        ): Promise<ZapfyTypes.UpdateProfileStatusResult> => {\r\n            try {\r\n\r\n                const {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    status,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateProfileStatusResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateProfileStatusResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/updateProfileStatus`, { status });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const updateProfileName = async (\r\n            params: ZapfyTypes.UpdateProfileNameParams,\r\n        ): Promise<ZapfyTypes.UpdateProfileNameResult> => {\r\n            try {\r\n                const {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    name,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateProfileNameResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateProfileNameResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/updateProfileName`, { name });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getProfilePictureUrl = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.UpdateProfilePictureResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateProfilePictureResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateProfilePictureResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/getProfilePictureUrl`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const blockUser = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.BlockUserResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.BlockUserResult,\r\n                    AxiosResponse<ZapfyTypes.BlockUserResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/blockUser`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const unblockUser = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.BlockUserResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.BlockUserResult,\r\n                    AxiosResponse<ZapfyTypes.BlockUserResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/unblockUser`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getBusinessProfile = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.GetBusinessProfileResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.GetBusinessProfileResult,\r\n                    AxiosResponse<ZapfyTypes.GetBusinessProfileResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/getBusinessProfile`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    export namespace Message {\r\n        export const sendTextMessage = async (\r\n           params: ZapfyTypes.SendTextMessageParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    text,\r\n                    destination,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=text`, { text, destination });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const sendButtonsMessage = async (\r\n            params: ZapfyTypes.SendButtonsMessageParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    destination,\r\n                    buttons,\r\n                    text,\r\n                    footer,\r\n                } = params;\r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=buttons`, { text, footer, buttons, destination });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const sendListMessage = async (\r\n            params: ZapfyTypes.SendListMessageParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const {\r\n                    text,\r\n                    buttonText,\r\n                    title,\r\n                    destination,\r\n                    sections,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                } = params;\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=list`, { \r\n                    text,\r\n                    buttonText,\r\n                    title,\r\n                    destination,\r\n                    sections,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const sendLocationMessage = async (\r\n            params: ZapfyTypes.SendLocationParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const {\r\n                    lat,\r\n                    long,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                } = params;\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=location`, { \r\n                    lat,\r\n                    long,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n    }\r\n}","export namespace ZapfyTypes {\r\n    export interface DefaultZapfyResultObject<T> {\r\n        result?: T,\r\n        isValid: boolean,\r\n    };\r\n\r\n    export type ListSection = {\r\n        title: string,\r\n        rows: { id: string, title: string }[],\r\n    };\r\n\r\n    export type MediaType = 'image' | 'audio' | 'video' | 'document';\r\n\r\n    export type UpdateProfileStatusParams = DefaultParams & { status: string };\r\n    export type UpdateProfileNameParams = DefaultParams & { name: string };\r\n    export type DefaultParamsWithPhone = DefaultParams & { phoneNumber: string };\r\n    export type DefaultParamsWithDestination = DefaultParams & { destination: string };\r\n    export type UpdateWebhookParams = DefaultParams & { webhookUrl: string };\r\n    \r\n    export type SendLocationParams = DefaultParamsWithDestination & { lat: string, long: string };\r\n    export type SendTextMessageParams = DefaultParamsWithDestination & { text: string };\r\n    export type SendButtonsMessageParams = DefaultParamsWithDestination & {\r\n        buttons: Button[],\r\n        text: string,\r\n        footer?: string,\r\n    };\r\n    export type SendListMessageParams = DefaultParamsWithDestination & {\r\n        sections: ListSection[],\r\n        buttonText: string,\r\n        title: string,\r\n        text: string,\r\n        footer?: string,\r\n    };\r\n\r\n    export type Button = {\r\n        id: string,\r\n        body: string,\r\n    };\r\n    \r\n    export type IsOnWhatsApp = {\r\n        exists: boolean,\r\n        jid: string,\r\n    };\r\n    \r\n    export type BussinessProfileInfo = {\r\n        wid: string,\r\n        description: string,\r\n        website: string[],\r\n        category: string,\r\n        business_hours: {},\r\n    };\r\n    \r\n    export type ProfileStatus = {\r\n        status: string,\r\n        setAt: Date,\r\n    };\r\n    \r\n    export type Instance = {\r\n        id: number\r\n        key: string\r\n        token: string\r\n        status: string\r\n        name: string\r\n        webhookUrl: string\r\n        userId: number\r\n        createdAt: Date\r\n        updatedAt: Date\r\n        deletedAt: Date | null\r\n    }\r\n    \r\n    export type DefaultParams = {\r\n        instanceKey: string,\r\n        instanceToken: string,\r\n    };\r\n    \r\n    export type InstanceState = 'disconnected' | 'connected';\r\n    export type ConnectInstanceResult = DefaultZapfyResultObject<{ qrCode: string, state: InstanceState }>;\r\n    export type GetInstanceStateResult = DefaultZapfyResultObject<{ state: InstanceState | { state: InstanceState, contact: { id: string, name: string }}}>;\r\n    export type UpdateWebhookResult = DefaultZapfyResultObject<Instance>;\r\n    export type VerifyIfNumberIsInWhatsAppResult = DefaultZapfyResultObject<IsOnWhatsApp>;\r\n    export type GetProfileStatusResult = DefaultZapfyResultObject<ProfileStatus>;\r\n    export type UpdateProfileStatusResult = DefaultZapfyResultObject<boolean>;\r\n    export type UpdateProfileNameResult = DefaultZapfyResultObject<boolean>;\r\n    export type UpdateProfilePictureResult = DefaultZapfyResultObject<string>;\r\n    export type BlockUserResult = DefaultZapfyResultObject<boolean>;\r\n    export type GetBusinessProfileResult = DefaultZapfyResultObject<BussinessProfileInfo>;\r\n    export type DefaultMessageResponse = DefaultZapfyResultObject<{}>;\r\n}"],"names":["client","axios","create","baseURL","ZapfySdk","ZapfyTypes","Instance","Profile","Message","connect","async","post","params","instanceKey","instanceToken","data","err","Error","disconnect","getState","get","updateWebhook","webhookUrl","verifyIfNumberIsInWhatsApp","phoneNumber","getProfileStatus","updateProfileStatus","status","updateProfileName","name","getProfilePictureUrl","blockUser","unblockUser","getBusinessProfile","sendTextMessage","text","destination","sendButtonsMessage","buttons","footer","sendListMessage","buttonText","title","sections","sendLocationMessage","lat","long"],"mappings":"2BAEmBA,EAAGC,EAAMC,OAAO,CAC/BC,QAAS,4BCGIC,IAAQA,ECNEC,GDM3B,SAAiBD,GACb,IAAiBE,EAuEAC,EA2KAC,GAlPAF,EAAAF,EAAQE,WAARF,WAqEhB,CAAA,IApEgBK,QAAUC,UAGnB,IAOI,aALuBV,EAAOW,KAG5B,aAAaC,EAAOC,qBAAqBD,EAAOE,0BAElCC,IAGnB,CAFC,MAAOC,GACL,MAAUC,IAAAA,MAAMD,EACnB,GAGQV,EAAAY,WAAaR,UAGtB,IAOI,aAL6BV,EAACW,KAG5B,aAAaC,EAAOC,qBAAqBD,EAAOE,6BAElCC,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,GAGQV,EAAAa,SAAWT,UAGpB,IAOI,aAL6BV,EAACoB,IAG5B,aAAaR,EAAOC,qBAAqBD,EAAOE,2BAElCC,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,GAGQV,EAAAe,cAAgBX,UAGzB,IACI,MAAMG,YACFA,EAAWC,cACXA,EAAaQ,WACbA,GACAV,EAOJ,aAL6BZ,EAACW,KAG5B,aAAaE,WAAqBC,kBAA+B,CAAEQ,gBAErDP,IAGnB,CAFC,MAAOC,GACL,MAAUC,IAAAA,MAAMD,EACnB,IAIQT,EAAAH,EAAOG,UAAPH,UAyKhB,CAAA,IAxKgBmB,2BAA6Bb,UAGtC,IACI,MAAOG,YACHA,EAAWC,cACXA,EAAaU,YACbA,GACAZ,EAOJ,aAL6BZ,EAACW,KAG5B,aAAaE,WAAqBC,eAA4B,CAAEU,iBAElDT,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,GAGQT,EAAAkB,iBAAmBf,UAG5B,IACI,MAAOG,YACHA,EAAWC,cACXA,EAAaU,YACbA,GACAZ,EAOJ,aAL6BZ,EAACW,KAG5B,aAAaE,WAAqBC,qBAAkC,CAAEU,iBAExDT,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,GAGQT,EAAAmB,oBAAsBhB,UAG/B,IAEI,MAAMG,YACFA,EAAWC,cACXA,EAAaa,OACbA,GACAf,EAOJ,aALuBZ,EAAOW,KAG5B,aAAaE,WAAqBC,wBAAqC,CAAEa,YAE3DZ,IAGnB,CAFC,MAAOC,GACL,MAAUC,IAAAA,MAAMD,EACnB,GAGQT,EAAAqB,kBAAoBlB,UAG7B,IACI,MAAMG,YACFA,EAAWC,cACXA,EAAae,KACbA,GACAjB,EAOJ,aALuBZ,EAAOW,KAG5B,aAAaE,WAAqBC,sBAAmC,CAAEe,UAEzDd,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,GAGQT,EAAAuB,qBAAuBpB,UAGhC,IACI,MAAOG,YACHA,EAAWC,cACXA,EAAaU,YACbA,GACAZ,EAOJ,aAL6BZ,EAACW,KAG5B,aAAaE,WAAqBC,yBAAsC,CAAEU,iBAE5DT,IAGnB,CAFC,MAAOC,GACL,MAAUC,IAAAA,MAAMD,EACnB,GAGQT,EAAAwB,UAAYrB,UAGrB,IACI,MAAOG,YACHA,EAAWC,cACXA,EAAaU,YACbA,GACAZ,EAOJ,aALuBZ,EAAOW,KAG5B,aAAaE,WAAqBC,cAA2B,CAAEU,iBAEjDT,IAGnB,CAFC,MAAOC,GACL,MAAUC,IAAAA,MAAMD,EACnB,GAGQT,EAAAyB,YAActB,UAGvB,IACI,MAAOG,YACHA,EAAWC,cACXA,EAAaU,YACbA,GACAZ,EAOJ,aALuBZ,EAAOW,KAG5B,aAAaE,WAAqBC,gBAA6B,CAAEU,iBAEnDT,IAGnB,CAFC,MAAOC,GACL,UAAeC,MAACD,EACnB,GAGQT,EAAA0B,mBAAqBvB,UAG9B,IACI,MAAOG,YACHA,EAAWC,cACXA,EAAaU,YACbA,GACAZ,EAOJ,aAL6BZ,EAACW,KAG5B,aAAaE,WAAqBC,uBAAoC,CAAEU,iBAE1DT,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,IAIQR,EAAAJ,EAAOI,UAAPJ,UAyGhB,CAAA,IAxGgB8B,gBAAkBxB,UAG3B,IACI,MAAMG,YACFA,EAAWC,cACXA,EAAaqB,KACbA,EAAIC,YACJA,GACAxB,EAOJ,aALuBZ,EAAOW,KAGf,aAAAE,WAAqBC,sBAAmC,CAAEqB,OAAMC,iBAE/DrB,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,GAGQR,EAAA6B,mBAAqB3B,UAG9B,IACI,MAAMG,YACFA,EAAWC,cACXA,EAAasB,YACbA,EAAWE,QACXA,EAAOH,KACPA,EAAII,OACJA,GACA3B,EAMJ,aAL6BZ,EAACW,KAGf,aAAAE,WAAqBC,yBAAsC,CAAEqB,OAAMI,SAAQD,UAASF,iBAEnFrB,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,GAGQR,EAAAgC,gBAAkB9B,UAG3B,IACI,MAAMyB,KACFA,EAAIM,WACJA,EAAUC,MACVA,EAAKN,YACLA,EAAWO,SACXA,EAAQ9B,YACRA,EAAWC,cACXA,GACAF,EAeJ,aAb6BZ,EAACW,KAG5B,aAAaE,WAAqBC,sBAAmC,CACnEqB,OACAM,aACAC,QACAN,cACAO,WACA9B,cACAC,mBAGYC,IAGnB,CAFC,MAAOC,GACL,MAAUC,IAAAA,MAAMD,EACnB,GAGQR,EAAAoC,oBAAsBlC,UAG/B,IACI,MAAMmC,IACFA,EAAGC,KACHA,EAAIjC,YACJA,EAAWC,cACXA,GACAF,EAYJ,aAV6BZ,EAACW,KAG5B,aAAaE,WAAqBC,0BAAuC,CACvE+B,MACAC,OACAjC,cACAC,mBAGYC,IAGnB,CAFC,MAAOC,GACL,MAAM,IAASC,MAACD,EACnB,EAGZ,CA7VD,CAAiBZ,IAAAA,EA6VhB,CAAA,ICnWgBC,IAAAA,EAuFhB,CAAA"}