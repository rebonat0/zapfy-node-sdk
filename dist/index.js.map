{"version":3,"file":"index.js","sources":["../src/sdk.ts","../src/http/zapfy.http.ts","../src/types/index.ts"],"sourcesContent":["import { AxiosResponse } from \"axios\";\r\nimport { client } from \"./http/zapfy.http\"\r\nimport { \r\n    ZapfyTypes,\r\n} from \"./types\";\r\n\r\nexport namespace ZapfySdk {\r\n    export namespace Instance {\r\n        export const connect = async (\r\n            params: ZapfyTypes.DefaultParams\r\n        ): Promise<ZapfyTypes.ConnectInstanceResult> => {\r\n            try {\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.ConnectInstanceResult,\r\n                    AxiosResponse<ZapfyTypes.ConnectInstanceResult> \r\n                >(`/instance/${params.instanceKey}/token/${params.instanceToken}/connect`);\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const disconnect = async (\r\n            params: ZapfyTypes.DefaultParams\r\n        ): Promise<ZapfyTypes.ConnectInstanceResult> => {\r\n            try {\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.ConnectInstanceResult,\r\n                    AxiosResponse<ZapfyTypes.ConnectInstanceResult> \r\n                >(`/instance/${params.instanceKey}/token/${params.instanceToken}/disconnect`);\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getState = async (\r\n            params: ZapfyTypes.DefaultParams\r\n        ): Promise<ZapfyTypes.GetInstanceStateResult> => {\r\n            try {\r\n                \r\n                const response = await client.get<\r\n                    ZapfyTypes.GetInstanceStateResult,\r\n                    AxiosResponse<ZapfyTypes.GetInstanceStateResult>\r\n                >(`/instance/${params.instanceKey}/token/${params.instanceToken}/getState`);\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const updateWebhook = async (\r\n            params: ZapfyTypes.UpdateWebhookParams\r\n        ): Promise<ZapfyTypes.UpdateWebhookResult> => {\r\n            try {\r\n                const { \r\n                    instanceKey, \r\n                    instanceToken, \r\n                    webhookUrl\r\n                } = params;\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateWebhookResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateWebhookResult>\r\n                >(`/instance/${instanceKey}/token/${instanceToken}/updateWebhook`, { webhookUrl });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    export namespace Profile {\r\n        export const verifyIfNumberIsInWhatsApp = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.VerifyIfNumberIsInWhatsAppResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.VerifyIfNumberIsInWhatsAppResult,\r\n                    AxiosResponse<ZapfyTypes.VerifyIfNumberIsInWhatsAppResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/onWhatsApp`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getProfileStatus = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.GetProfileStatusResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.GetProfileStatusResult,\r\n                    AxiosResponse<ZapfyTypes.GetProfileStatusResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/getProfileStatus`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const updateProfileStatus = async (\r\n            params: ZapfyTypes.UpdateProfileStatusParams,\r\n        ): Promise<ZapfyTypes.UpdateProfileStatusResult> => {\r\n            try {\r\n\r\n                const {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    status,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateProfileStatusResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateProfileStatusResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/updateProfileStatus`, { status });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const updateProfileName = async (\r\n            params: ZapfyTypes.UpdateProfileNameParams,\r\n        ): Promise<ZapfyTypes.UpdateProfileNameResult> => {\r\n            try {\r\n                const {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    name,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateProfileNameResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateProfileNameResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/updateProfileName`, { name });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getProfilePictureUrl = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.UpdateProfilePictureResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.UpdateProfilePictureResult,\r\n                    AxiosResponse<ZapfyTypes.UpdateProfilePictureResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/getProfilePictureUrl`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const blockUser = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.BlockUserResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.BlockUserResult,\r\n                    AxiosResponse<ZapfyTypes.BlockUserResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/blockUser`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const unblockUser = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.BlockUserResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.BlockUserResult,\r\n                    AxiosResponse<ZapfyTypes.BlockUserResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/unblockUser`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const getBusinessProfile = async (\r\n            params: ZapfyTypes.DefaultParamsWithPhone\r\n        ): Promise<ZapfyTypes.GetBusinessProfileResult> => {\r\n            try {\r\n                const  {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    phoneNumber,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.GetBusinessProfileResult,\r\n                    AxiosResponse<ZapfyTypes.GetBusinessProfileResult> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/getBusinessProfile`, { phoneNumber });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n    }\r\n    export namespace Message {\r\n        export const sendTextMessage = async (\r\n           params: ZapfyTypes.SendTextMessageParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    text,\r\n                    destination,\r\n                } = params;\r\n\r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=text`, { text, destination });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const sendButtonsMessage = async (\r\n            params: ZapfyTypes.SendButtonsMessageParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const {\r\n                    instanceKey, \r\n                    instanceToken, \r\n                    destination,\r\n                    buttons,\r\n                    text,\r\n                    footer,\r\n                } = params;\r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=buttons`, { text, footer, buttons, destination });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const sendListMessage = async (\r\n            params: ZapfyTypes.SendListMessageParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const {\r\n                    text,\r\n                    buttonText,\r\n                    title,\r\n                    destination,\r\n                    sections,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                } = params;\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=list`, { \r\n                    text,\r\n                    buttonText,\r\n                    title,\r\n                    destination,\r\n                    sections,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const sendLocationMessage = async (\r\n            params: ZapfyTypes.SendLocationParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const {\r\n                    lat,\r\n                    long,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                } = params;\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=location`, { \r\n                    lat,\r\n                    long,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const sendMediaMessage = async (\r\n            params: ZapfyTypes.SendMediaMessageParams,\r\n        ): Promise<ZapfyTypes.DefaultMessageResponse> => {\r\n            try {\r\n                const {\r\n                    base64,\r\n                    fileName,\r\n                    type,\r\n                    instanceKey,\r\n                    instanceToken,\r\n                    text,\r\n                } = params;\r\n                \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultMessageResponse,\r\n                    AxiosResponse<ZapfyTypes.DefaultMessageResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/message?type=${type}`, { \r\n                    base64,\r\n                    fileName,\r\n                    text,\r\n                });\r\n\r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    export namespace Group {\r\n        export const createGroup = async (\r\n            params: ZapfyTypes.CreateGroupParams,\r\n        ): Promise<ZapfyTypes.CreateGroupResponse> => {\r\n             try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    name,\r\n                    participants,\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.CreateGroupResponse,\r\n                    AxiosResponse<ZapfyTypes.CreateGroupResponse> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/createGroup`, { name, participants });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const groupUpdateSubject = async (\r\n            params: ZapfyTypes.GroupUpdateSubjectParams,\r\n        ): Promise<ZapfyTypes.DefaultZapfyResultObject<void>> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    groupId,\r\n                    subject,\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultZapfyResultObject<void>,\r\n                    AxiosResponse<ZapfyTypes.DefaultZapfyResultObject<void>> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/groupUpdateSubject`, { groupId, subject });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const groupUpdateDescription = async (\r\n            params: ZapfyTypes.GroupUpdateDescriptionParams,\r\n        ): Promise<ZapfyTypes.DefaultZapfyResultObject<void>> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    groupId,\r\n                    description,\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultZapfyResultObject<void>,\r\n                    AxiosResponse<ZapfyTypes.DefaultZapfyResultObject<void>> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/groupUpdateDescription`, { groupId, description });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const groupInviteCode = async (\r\n            params: ZapfyTypes.GroupInviteCodeParams,\r\n        ): Promise<ZapfyTypes.DefaultZapfyResultObject<string>> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    groupId,\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultZapfyResultObject<string>,\r\n                    AxiosResponse<ZapfyTypes.DefaultZapfyResultObject<string>> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/groupInviteCode`, { groupId });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const groupRevokeInvite = async (\r\n            params: ZapfyTypes.GroupInviteCodeParams,\r\n        ): Promise<ZapfyTypes.DefaultZapfyResultObject<string>> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    groupId,\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultZapfyResultObject<string>,\r\n                    AxiosResponse<ZapfyTypes.DefaultZapfyResultObject<string>> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/groupRevokeInvite`, { groupId });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const groupMetadata = async (\r\n            params: ZapfyTypes.GroupInviteCodeParams,\r\n        ): Promise<ZapfyTypes.DefaultZapfyResultObject<string>> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    groupId,\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultZapfyResultObject<string>,\r\n                    AxiosResponse<ZapfyTypes.DefaultZapfyResultObject<string>> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/groupMetadata`, { groupId });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const groupParticipantsUpdate = async (\r\n            params: ZapfyTypes.GroupParticipantsUpdateParams,\r\n        ): Promise<ZapfyTypes.DefaultZapfyResultObject<{ status: string, jid: string }[]>> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    groupId,\r\n                    action,\r\n                    participants\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultZapfyResultObject<{ status: string, jid: string }[]>,\r\n                    AxiosResponse<ZapfyTypes.DefaultZapfyResultObject<{ status: string, jid: string }[]>> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/groupParticipantsUpdate`, { \r\n                    groupId,  \r\n                    action,\r\n                    participants,\r\n                });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n\r\n        export const groupSettingUpdate = async (\r\n            params: ZapfyTypes.GroupSettingsUpdateParams,\r\n        ): Promise<ZapfyTypes.DefaultZapfyResultObject<void>> => {\r\n            try {\r\n                const { \r\n                    instanceKey,\r\n                    instanceToken,\r\n                    groupId,\r\n                    setting,\r\n                } = params;\r\n \r\n                const response = await client.post<\r\n                    ZapfyTypes.DefaultZapfyResultObject<void>,\r\n                    AxiosResponse<ZapfyTypes.DefaultZapfyResultObject<void>> \r\n                >(`/instance/${instanceKey}/token/${instanceToken}/groupSettingUpdate`, { \r\n                    groupId,  \r\n                    setting,\r\n                });\r\n \r\n                return response.data;\r\n            } catch (err: any) {\r\n                throw new Error(err);\r\n            }\r\n        }\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport const client = axios.create({\r\n    baseURL: 'https://api.zapfy.me/v1',\r\n    headers: {\r\n        'Accept': '*/*',\r\n        'Connection': 'keep-alive',\r\n        'User-Agent': 'request',\r\n        'Content-Type': 'application/json',\r\n    }\r\n});","export namespace ZapfyTypes {\r\n    export interface DefaultZapfyResultObject<T> {\r\n        result?: T,\r\n        isValid: boolean,\r\n    };\r\n\r\n    export type ListSection = {\r\n        title: string,\r\n        rows: { id: string, title: string }[],\r\n    };\r\n\r\n    export interface Contact {\r\n        id: string;\r\n        /** name of the contact, you have saved on your WA */\r\n        name?: string;\r\n        /** name of the contact, the contact has set on their own on WA */\r\n        notify?: string;\r\n        /** I have no idea */\r\n        verifiedName?: string;\r\n        imgUrl?: string;\r\n        status?: string;\r\n    }\r\n    \r\n    export type MediaType = 'image' | 'audio' | 'video' | 'document';\r\n\r\n    export type GroupParticipant = (Contact & {\r\n        isAdmin?: boolean;\r\n        isSuperAdmin?: boolean;\r\n        admin?: 'admin' | 'superadmin' | null;\r\n    });\r\n    export interface GroupMetadata {\r\n        id: string;\r\n        owner: string | undefined;\r\n        subject: string;\r\n        /** group subject owner */\r\n        subjectOwner?: string;\r\n        /** group subject modification date */\r\n        subjectTime?: number;\r\n        creation?: number;\r\n        desc?: string;\r\n        descOwner?: string;\r\n        descId?: string;\r\n        /** is set when the group only allows admins to change group settings */\r\n        restrict?: boolean;\r\n        /** is set when the group only allows admins to write messages */\r\n        announce?: boolean;\r\n        /** number of group participants */\r\n        size?: number;\r\n        participants: GroupParticipant[];\r\n        ephemeralDuration?: number;\r\n    }\r\n\r\n    export type GroupUpdateSubjectParams = DefaultParams & { groupId: string, subject: string };\r\n    export type GroupUpdateDescriptionParams = DefaultParams & { groupId: string, description: string };\r\n    export type GroupInviteCodeParams = DefaultParams & { groupId: string };\r\n    export type GroupParticipantsUpdateParams = DefaultParams & { groupId: string, participants: string[], action: 'add' | 'demote' | 'promote' | 'remove' };\r\n    export type GroupSettingsUpdateParams = DefaultParams & { groupId: string, setting: 'announcement' | 'not_announcement' | 'unlocked' | 'locked'};\r\n\r\n    export type CreateGroupParams = DefaultParams & { name: string, participants: string[] };\r\n    export type CreateGroupResponse = DefaultZapfyResultObject<GroupMetadata>;\r\n\r\n    export type UpdateProfileStatusParams = DefaultParams & { status: string };\r\n    export type UpdateProfileNameParams = DefaultParams & { name: string };\r\n    export type DefaultParamsWithPhone = DefaultParams & { phoneNumber: string };\r\n    export type DefaultParamsWithDestination = DefaultParams & { destination: string };\r\n    export type UpdateWebhookParams = DefaultParams & { webhookUrl: string };\r\n    \r\n    export type SendLocationParams = DefaultParamsWithDestination & { lat: string, long: string };\r\n    export type SendTextMessageParams = DefaultParamsWithDestination & { text: string };\r\n    export type SendMediaMessageParams = DefaultParamsWithDestination & { \r\n        type: MediaType,\r\n        base64: string,\r\n        text?: string,\r\n        fileName?: string,\r\n    };\r\n    export type SendButtonsMessageParams = DefaultParamsWithDestination & {\r\n        buttons: Button[],\r\n        text: string,\r\n        footer?: string,\r\n    };\r\n    export type SendListMessageParams = DefaultParamsWithDestination & {\r\n        sections: ListSection[],\r\n        buttonText: string,\r\n        title: string,\r\n        text: string,\r\n        footer?: string,\r\n    };\r\n\r\n    export type Button = {\r\n        id: string,\r\n        body: string,\r\n    };\r\n    \r\n    export type IsOnWhatsApp = {\r\n        exists: boolean,\r\n        jid: string,\r\n    };\r\n    \r\n    export type BussinessProfileInfo = {\r\n        wid: string,\r\n        description: string,\r\n        website: string[],\r\n        category: string,\r\n        business_hours: {},\r\n    };\r\n    \r\n    export type ProfileStatus = {\r\n        status: string,\r\n        setAt: Date,\r\n    };\r\n    \r\n    export type Instance = {\r\n        id: number\r\n        key: string\r\n        token: string\r\n        status: string\r\n        name: string\r\n        webhookUrl: string\r\n        userId: number\r\n        createdAt: Date\r\n        updatedAt: Date\r\n        deletedAt: Date | null\r\n    }\r\n    \r\n    export type DefaultParams = {\r\n        instanceKey: string,\r\n        instanceToken: string,\r\n    };\r\n    \r\n    export type InstanceState = 'disconnected' | 'connected';\r\n    export type ConnectInstanceResult = DefaultZapfyResultObject<{ qrCode: string, state: InstanceState }>;\r\n    export type GetInstanceStateResult = DefaultZapfyResultObject<{ state: InstanceState | { state: InstanceState, contact: { id: string, name: string }}}>;\r\n    export type UpdateWebhookResult = DefaultZapfyResultObject<Instance>;\r\n    export type VerifyIfNumberIsInWhatsAppResult = DefaultZapfyResultObject<IsOnWhatsApp>;\r\n    export type GetProfileStatusResult = DefaultZapfyResultObject<ProfileStatus>;\r\n    export type UpdateProfileStatusResult = DefaultZapfyResultObject<boolean>;\r\n    export type UpdateProfileNameResult = DefaultZapfyResultObject<boolean>;\r\n    export type UpdateProfilePictureResult = DefaultZapfyResultObject<string>;\r\n    export type BlockUserResult = DefaultZapfyResultObject<boolean>;\r\n    export type GetBusinessProfileResult = DefaultZapfyResultObject<BussinessProfileInfo>;\r\n    export type DefaultMessageResponse = DefaultZapfyResultObject<{}>;\r\n}"],"names":["ZapfySdk","Instance","Profile","Message","Group","client","create","baseURL","headers","Accept","Connection","connect","params","post","instanceKey","instanceToken","then","response","data","err","Error","e","Promise","reject","disconnect","resolve","_catch","getState","get","updateWebhook","webhookUrl","verifyIfNumberIsInWhatsApp","phoneNumber","getProfileStatus","updateProfileStatus","status","updateProfileName","name","getProfilePictureUrl","blockUser","unblockUser","getBusinessProfile","sendTextMessage","text","destination","sendButtonsMessage","footer","buttons","sendListMessage","buttonText","title","sections","sendLocationMessage","lat","long","sendMediaMessage","type","base64","fileName","createGroup","participants","groupUpdateSubject","groupId","subject","groupUpdateDescription","description","groupInviteCode","groupRevokeInvite","groupMetadata","groupParticipantsUpdate","action","groupSettingUpdate","setting","ZapfyTypes"],"mappings":"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"}